openapi: 3.0.3
info:
  title: Monotickets API
  version: 1.0.0
  description: >-
    API para autenticación, gestión de usuarios, eventos, venues, checkpoints,
    invitados, tickets 1–N, QRs, escaneo (online/offline), importaciones y
    notificaciones.
  license:
    name: Proprietary
    url: https://monotickets.app/legal
servers:
  - url: https://api.monotickets.app/v1
security:
  - bearerAuth: []
    tenantHeader: []
paths:
  /health:
    get:
      summary: Comprueba el estado básico del servicio.
      description: >-
        Ejecuta verificaciones rápidas contra la base de datos, Redis y la
        conexión de colas para determinar el estado general de la API.
      tags: [Health]
      security: []
      responses:
        '200':
          description: Todos los servicios dependientes responden correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Algún servicio se encuentra degradado o inalcanzable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
  /auth/login:
    post:
      summary: Inicia sesión y obtiene tokens de acceso y refresh.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
            examples:
              credenciales-validas:
                summary: Credenciales válidas
                value:
                  email: admin@monotickets.app
                  password: "p4ssw0rdSeguro"
      responses:
        '200':
          description: Tokens emitidos correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPairResponse'
              examples:
                respuesta-exitosa:
                  summary: Tokens emitidos
                  value:
                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    token_type: Bearer
                    expires_in: 900
                    refresh_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                    refresh_expires_in: 3600
                    session_id: 01HZYME6EBF1G01PZ8C6E6CBR3
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /auth/logout:
    post:
      summary: Cierra sesión e invalida el token actual.
      tags: [Auth]
      security:
        - bearerAuth: []
          tenantHeader: []
      responses:
        '200':
          description: Sesión cerrada correctamente.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: Logged out successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/refresh:
    post:
      summary: Refresca un token de acceso utilizando un refresh token válido.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefreshRequest'
            examples:
              refresh-token:
                summary: Refresh token válido
                value:
                  refresh_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
      responses:
        '200':
          description: Nuevo par de tokens generado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPairResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /auth/forgot-password:
    post:
      summary: Inicia el proceso de recuperación de contraseña.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthForgotPasswordRequest'
            examples:
              solicitud-reset:
                summary: Solicitud de restablecimiento
                value:
                  email: user@monotickets.app
      responses:
        '200':
          description: Se envió la notificación de recuperación (si existe el correo).
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: If the email exists, a reset link has been sent.
        '422':
          $ref: '#/components/responses/ValidationError'
  /auth/reset-password:
    post:
      summary: Restablece la contraseña usando un token válido.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthResetPasswordRequest'
            examples:
              restablecer:
                summary: Restablecer contraseña
                value:
                  email: user@monotickets.app
                  token: 5c8f5646c0d44a789f1f7e4c8fe31234abcd1234abcd1234abcd1234abcd1234
                  password: NuevaContraseñaSegura1!
                  password_confirmation: NuevaContraseñaSegura1!
      responses:
        '200':
          description: Contraseña restablecida correctamente.
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /admin/analytics:
    get:
      summary: Obtiene métricas globales para eventos administrados.
      description: >-
        Devuelve tarjetas con métricas de asistencia, ocupación y series
        horarias por evento. Solo disponible para superadministradores.
      tags: [Admin]
      security:
        - bearerAuth: []
          tenantHeader: []
      parameters:
        - $ref: '#/components/parameters/AdminAnalyticsTenantFilter'
        - $ref: '#/components/parameters/AnalyticsFromFilter'
        - $ref: '#/components/parameters/AnalyticsToFilter'
      responses:
        '200':
          description: Colección de tarjetas con métricas por evento.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAnalyticsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /billing/invoices/close:
    patch:
      summary: Cierra el periodo de facturación activo y emite la factura pendiente.
      tags: [Billing]
      security:
        - bearerAuth: []
          tenantHeader: []
      responses:
        '201':
          description: Factura generada exitosamente para el periodo actual.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoiceResponse'
        '200':
          description: Se devolvió la factura pendiente sin generar una nueva.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoiceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /billing/invoices/{invoice_id}/pay:
    patch:
      summary: Registra el pago de una factura existente.
      tags: [Billing]
      security:
        - bearerAuth: []
          tenantHeader: []
      parameters:
        - name: invoice_id
          in: path
          required: true
          description: Identificador de la factura a pagar.
          schema:
            type: string
      responses:
        '200':
          description: Factura pagada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingInvoiceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /users:
    get:
      summary: Lista paginada de usuarios.
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/TenantHeaderOptional'
        - $ref: '#/components/parameters/UserRoleFilter'
        - $ref: '#/components/parameters/UserIsActiveFilter'
        - $ref: '#/components/parameters/UserSearchFilter'
        - $ref: '#/components/parameters/UserSortFilter'
        - $ref: '#/components/parameters/UserPerPageFilter'
      responses:
        '200':
          description: Colección paginada de usuarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPaginatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'
    post:
      summary: Crea un nuevo usuario.
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/TenantHeaderOptional'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStoreRequest'
            examples:
              crear-organizer:
                summary: Crear organizador
                value:
                  name: Ana Pérez
                  email: ana.perez@monotickets.app
                  phone: '+5491122334455'
                  password: ContraseñaUltraSegura1!
                  is_active: true
                  roles: ['organizer']
                  tenant_id: 01HZYME6EBF1G01PZ8C6E6CBR3
      responses:
        '201':
          description: Usuario creado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/TenantHeaderOptional'
      - name: userId
        in: path
        required: true
        description: Identificador ULID del usuario.
        schema:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
    get:
      summary: Obtiene el detalle de un usuario.
      tags: [Users]
      responses:
        '200':
          description: Usuario encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Actualiza un usuario existente.
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            examples:
              actualizar-roles:
                summary: Actualizar roles y estado
                value:
                  roles: ['hostess']
                  is_active: false
      responses:
        '200':
          description: Usuario actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/ValidationError'
    delete:
      summary: Elimina (soft delete) un usuario.
      tags: [Users]
      responses:
        '204':
          description: Usuario eliminado.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /events/{event_id}/analytics:
    parameters:
      - $ref: '#/components/parameters/TenantHeaderOptional'
      - name: event_id
        in: path
        required: true
        description: Identificador ULID del evento a consultar.
        schema:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
      - $ref: '#/components/parameters/AnalyticsFromFilter'
      - $ref: '#/components/parameters/AnalyticsToFilter'
      - $ref: '#/components/parameters/AnalyticsHourPage'
      - $ref: '#/components/parameters/AnalyticsHourPerPage'
      - $ref: '#/components/parameters/AnalyticsCheckpointPage'
      - $ref: '#/components/parameters/AnalyticsCheckpointPerPage'
      - $ref: '#/components/parameters/AnalyticsDuplicatesPage'
      - $ref: '#/components/parameters/AnalyticsDuplicatesPerPage'
      - $ref: '#/components/parameters/AnalyticsErrorsPage'
      - $ref: '#/components/parameters/AnalyticsErrorsPerPage'
    get:
      summary: Recupera datasets consolidados de analytics para un evento.
      tags: [Events]
      responses:
        '200':
          description: Colecciones paginadas con métricas de asistencia.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAnalyticsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /scan:
    post:
      summary: Registra un escaneo online de un ticket.
      tags: [Scan]
      parameters:
        - $ref: '#/components/parameters/TenantHeaderOptional'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
            examples:
              escaneo-online:
                summary: Escaneo directo desde dispositivo
                value:
                  qr_code: MT-ABC-123456
                  checkpoint_id: 01J0123ABCQ4XYZ7890V1YZ23
                  device_id: front-door-device
                  scanned_at: '2024-07-01T18:45:00Z'
      responses:
        '200':
          description: Resultado del escaneo procesado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /scan/batch:
    post:
      summary: Sincroniza un lote de escaneos capturados en modo offline.
      tags: [Scan]
      parameters:
        - $ref: '#/components/parameters/TenantHeaderOptional'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanBatchRequest'
            examples:
              lote-offline:
                summary: Dos lecturas válidas y una desconocida
                value:
                  scans:
                    - qr_code: MT-ABC-123456
                      scanned_at: '2024-07-02T10:00:00Z'
                      device_id: gate-1
                    - qr_code: MT-ABC-654321
                      scanned_at: '2024-07-02T10:05:00Z'
                      device_id: gate-1
                    - qr_code: UNKNOWN-CODE
                      scanned_at: '2024-07-02T10:10:00Z'
                      device_id: gate-1
      responses:
        '207':
          description: Resultados individuales por escaneo sincronizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanBatchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /scans/sync:
    post:
      summary: Procesa un lote idempotente de escaneos offline.
      description: >-
        Los escaneos duplicados dentro del mismo payload se ignoran y se
        devuelven estadísticas agregadas del procesamiento.
      tags: [Scan]
      parameters:
        - $ref: '#/components/parameters/TenantHeaderOptional'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanBatchRequest'
            examples:
              sync-con-duplicados:
                summary: Deduplicación y registros con error
                value:
                  scans:
                    - qr_code: MT-ABC-123456
                      scanned_at: '2024-07-02T11:00:00Z'
                      device_id: gate-1
                    - qr_code: MT-ABC-123456
                      scanned_at: '2024-07-02T11:00:00Z'
                      device_id: gate-1
                    - qr_code: UNKNOWN-CODE
                      scanned_at: '2024-07-02T11:05:00Z'
                      device_id: gate-1
      responses:
        '207':
          description: Resumen del procesamiento con resultados ordenados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanSyncResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Envíe el token de acceso vigente en el header Authorization: Bearer <token>.'
    tenantHeader:
      type: apiKey
      in: header
      name: X-Tenant-ID
      description: >-
        Identificador del tenant. Obligatorio para usuarios no superadmin y para
        operaciones con alcance multi-tenant.
  parameters:
    TenantHeaderOptional:
      name: X-Tenant-ID
      in: header
      required: false
      description: >-
        Identificador del tenant activo. Requerido para usuarios que no sean
        superadmin y para operaciones multi-tenant.
      schema:
        type: string
    UserRoleFilter:
      name: role
      in: query
      required: false
      description: Filtra por rol asignado.
      schema:
        type: string
        enum: [superadmin, organizer, hostess]
    UserIsActiveFilter:
      name: is_active
      in: query
      required: false
      description: Filtra por estado activo.
      schema:
        type: boolean
    UserSearchFilter:
      name: search
      in: query
      required: false
      description: Texto libre para buscar por nombre o email.
      schema:
        type: string
        maxLength: 255
    UserSortFilter:
      name: sort
      in: query
      required: false
      description: Campo y dirección de ordenamiento.
      schema:
        type: string
        enum: [name, -name, created_at, -created_at]
    UserPerPageFilter:
      name: per_page
      in: query
      required: false
      description: Cantidad de resultados por página (1-100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
    AdminAnalyticsTenantFilter:
      name: tenant_id
      in: query
      required: false
      description: Filtra métricas de analytics por el tenant indicado.
      schema:
        type: string
    AnalyticsFromFilter:
      name: from
      in: query
      required: false
      description: Fecha inicial (ISO8601) para acotar las métricas.
      schema:
        type: string
        format: date
    AnalyticsToFilter:
      name: to
      in: query
      required: false
      description: Fecha final (ISO8601) para acotar las métricas.
      schema:
        type: string
        format: date
    AnalyticsHourPage:
      name: hour_page
      in: query
      required: false
      description: Número de página para la serie horaria (>= 1).
      schema:
        type: integer
        minimum: 1
    AnalyticsHourPerPage:
      name: hour_per_page
      in: query
      required: false
      description: Cantidad de puntos por página en la serie horaria (1-168).
      schema:
        type: integer
        minimum: 1
        maximum: 168
    AnalyticsCheckpointPage:
      name: checkpoint_page
      in: query
      required: false
      description: Número de página para el listado de checkpoints (>= 1).
      schema:
        type: integer
        minimum: 1
    AnalyticsCheckpointPerPage:
      name: checkpoint_per_page
      in: query
      required: false
      description: Cantidad de checkpoints a devolver por página (1-100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
    AnalyticsDuplicatesPage:
      name: duplicates_page
      in: query
      required: false
      description: Número de página para la lista de duplicados (>= 1).
      schema:
        type: integer
        minimum: 1
    AnalyticsDuplicatesPerPage:
      name: duplicates_per_page
      in: query
      required: false
      description: Cantidad de duplicados a devolver por página (1-100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
    AnalyticsErrorsPage:
      name: errors_page
      in: query
      required: false
      description: Número de página para la lista de errores (>= 1).
      schema:
        type: integer
        minimum: 1
    AnalyticsErrorsPerPage:
      name: errors_per_page
      in: query
      required: false
      description: Cantidad de registros de error a devolver por página (1-100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
  schemas:
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              example: UNAUTHORIZED
            message:
              type: string
              example: Invalid email or password.
            details:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              description: Detalle opcional de errores de validación.
    HealthStatusResponse:
      type: object
      required: [status, timestamp, checks]
      properties:
        status:
          type: string
          enum: [ok, degraded]
          description: Estado agregado del servicio.
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          required: [database, redis, queue]
          properties:
            database:
              $ref: '#/components/schemas/HealthSubsystemStatus'
            redis:
              $ref: '#/components/schemas/HealthSubsystemStatus'
            queue:
              $ref: '#/components/schemas/HealthSubsystemStatus'
    HealthSubsystemStatus:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [ok, error]
        message:
          type: string
          nullable: true
          description: Mensaje opcional cuando el servicio está degradado.
    PaginationMeta:
      type: object
      required: [page, per_page, total, total_pages]
      properties:
        page:
          type: integer
          minimum: 1
        per_page:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 1
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          format: password
          minLength: 12
    AuthRefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
    AuthForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
    AuthResetPasswordRequest:
      type: object
      required: [email, token, password, password_confirmation]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        token:
          type: string
          description: Token plano recibido por email.
          minLength: 64
          maxLength: 64
        password:
          type: string
          format: password
          minLength: 12
        password_confirmation:
          type: string
          format: password
          minLength: 12
    AuthTokenPairResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
        - refresh_token
        - refresh_expires_in
        - session_id
      properties:
        access_token:
          type: string
          description: Token de acceso JWT.
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Expiración del access token en segundos.
          example: 900
        refresh_token:
          type: string
          description: Token JWT de refresco asociado a la sesión.
        refresh_expires_in:
          type: integer
          description: Expiración del refresh token en segundos.
          example: 3600
        session_id:
          type: string
          description: Identificador ULID de la sesión asociada.
    UserRole:
      type: object
      required: [id, code, name]
      properties:
        id:
          type: string
          description: Identificador ULID del rol.
        code:
          type: string
          enum: [superadmin, organizer, hostess]
        name:
          type: string
        tenant_id:
          type: string
          nullable: true
          description: Tenant asociado al rol (null para superadmin).
    UserResource:
      type: object
      required:
        - id
        - tenant_id
        - name
        - email
        - is_active
        - roles
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Identificador ULID del usuario.
        tenant_id:
          type: string
          nullable: true
          description: Tenant asociado al usuario.
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
        is_active:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    UserPaginatedResponse:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
        meta:
          type: object
          required: [page, per_page, total, total_pages]
          properties:
            page:
              type: integer
            per_page:
              type: integer
            total:
              type: integer
            total_pages:
              type: integer
    UserSingleResponse:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/UserResource'
    UserStoreRequest:
      type: object
      required: [name, email, password, roles]
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 50
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 255
        is_active:
          type: boolean
        roles:
          type: array
          items:
            type: string
            enum: [superadmin, organizer, hostess]
        tenant_id:
          type: string
          nullable: true
          description: Tenant ULID requerido para roles distintos de superadmin.
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 50
        is_active:
          type: boolean
        roles:
          type: array
          items:
            type: string
            enum: [superadmin, organizer, hostess]
    ScanRequest:
      type: object
      required: [qr_code, scanned_at]
      properties:
        qr_code:
          type: string
          maxLength: 255
          description: Código QR leído del ticket.
        checkpoint_id:
          type: string
          format: uuid
          nullable: true
          description: Identificador del checkpoint donde se registró la lectura.
        device_id:
          type: string
          nullable: true
          maxLength: 255
          description: Identificador opcional del dispositivo lector.
        scanned_at:
          type: string
          format: date-time
          description: Momento en que se capturó el escaneo.
        offline:
          type: boolean
          description: Indica si la lectura fue realizada sin conexión.
          default: false
        event_id:
          type: string
          format: uuid
          nullable: true
          description: Identificador del evento esperado por el dispositivo.
    ScanResponse:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/ScanResultItem'
    ScanBatchRequest:
      type: object
      required: [scans]
      properties:
        scans:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ScanRequest'
    ScanBatchResponse:
      type: object
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScanBatchResultItem'
    ScanBatchResultItem:
      allOf:
        - $ref: '#/components/schemas/ScanResultItem'
        - type: object
          required: [index]
          properties:
            index:
              type: integer
              minimum: 0
              description: Posición del elemento en el lote original.
    ScanSyncResponse:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ScanSyncResultItem'
        meta:
          type: object
          required: [summary, total_scans, processed_scans]
          properties:
            summary:
              type: object
              required: [valid, duplicate, errors, deduplicated]
              properties:
                valid:
                  type: integer
                  minimum: 0
                duplicate:
                  type: integer
                  minimum: 0
                errors:
                  type: integer
                  minimum: 0
                deduplicated:
                  type: integer
                  minimum: 0
            total_scans:
              type: integer
              minimum: 1
            processed_scans:
              type: integer
              minimum: 1
    ScanSyncResultItem:
      type: object
      required: [index, result]
      properties:
        index:
          type: integer
          minimum: 0
        result:
          type: string
          enum: [valid, duplicate, invalid, revoked, expired, ignored, error]
        status:
          type: integer
          nullable: true
          description: Código HTTP cuando el resultado proviene de un error.
        message:
          type: string
          nullable: true
        reason:
          type: string
          nullable: true
        qr_code:
          type: string
          nullable: true
        ticket:
          type: object
          allOf:
            - $ref: '#/components/schemas/ScanTicketResource'
          nullable: true
        attendance:
          type: object
          allOf:
            - $ref: '#/components/schemas/ScanAttendanceResource'
          nullable: true
        deduplicated_with:
          type: integer
          nullable: true
          description: Índice del escaneo original cuando se ignora un duplicado.
    ScanResultItem:
      type: object
      required: [result, message, qr_code]
      properties:
        result:
          type: string
          enum: [valid, duplicate, invalid, revoked, expired]
          description: Resultado del proceso de validación.
        message:
          type: string
          description: Mensaje descriptivo para el operador.
        reason:
          type: string
          nullable: true
          description: Código interno que detalla el motivo del resultado.
        qr_code:
          type: string
          description: Código QR asociado al ticket.
        ticket:
          type: object
          allOf:
            - $ref: '#/components/schemas/ScanTicketResource'
          nullable: true
        attendance:
          type: object
          allOf:
            - $ref: '#/components/schemas/ScanAttendanceResource'
          nullable: true
    ScanTicketResource:
      type: object
      required: [id, event_id, status, type]
      properties:
        id:
          type: string
          description: Identificador del ticket escaneado.
        event_id:
          type: string
          description: Identificador del evento al que pertenece el ticket.
        status:
          type: string
          enum: [issued, used, revoked, expired]
        type:
          type: string
        issued_at:
          type: string
          format: date-time
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        guest:
          allOf:
            - $ref: '#/components/schemas/ScanGuestSummary'
          nullable: true
        event:
          type: object
          allOf:
            - $ref: '#/components/schemas/ScanEventSummary'
          nullable: true
    ScanGuestSummary:
      type: object
      required: [id, full_name]
      properties:
        id:
          type: string
        full_name:
          type: string
    ScanEventSummary:
      type: object
      required: [id, name, checkin_policy]
      properties:
        id:
          type: string
        name:
          type: string
        checkin_policy:
          type: string
          enum: [single, multiple]
    ScanAttendanceResource:
      type: object
      required: [id, result, scanned_at, offline]
      properties:
        id:
          type: string
        result:
          type: string
          enum: [valid, duplicate, invalid, revoked, expired]
        checkpoint_id:
          type: string
          nullable: true
        hostess_user_id:
          type: string
          nullable: true
        scanned_at:
          type: string
          format: date-time
        device_id:
          type: string
          nullable: true
        offline:
          type: boolean
        metadata:
          type: object
          nullable: true
          additionalProperties:
            type: string
    AdminAnalyticsResponse:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminAnalyticsCard'
        meta:
          type: object
          required: [tenants]
          properties:
            tenants:
              type: array
              items:
                $ref: '#/components/schemas/AdminAnalyticsTenant'
    AdminAnalyticsCard:
      type: object
      required: [event, overview, attendance]
      properties:
        event:
          $ref: '#/components/schemas/AdminAnalyticsEvent'
        overview:
          $ref: '#/components/schemas/AdminAnalyticsOverview'
        attendance:
          type: array
          items:
            $ref: '#/components/schemas/AdminAnalyticsAttendancePoint'
    AdminAnalyticsEvent:
      type: object
      required: [id, tenant_id, name, start_at, end_at, timezone, status]
      properties:
        id:
          type: string
        tenant_id:
          type: string
          nullable: true
        name:
          type: string
        start_at:
          type: string
          format: date-time
          nullable: true
        end_at:
          type: string
          format: date-time
          nullable: true
        timezone:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
    AdminAnalyticsOverview:
      type: object
      required: [invited, confirmed, attendances, duplicates, unique_attendees]
      properties:
        invited:
          type: integer
          minimum: 0
        confirmed:
          type: integer
          minimum: 0
        attendances:
          type: integer
          minimum: 0
        duplicates:
          type: integer
          minimum: 0
        unique_attendees:
          type: integer
          minimum: 0
        occupancy_rate:
          type: number
          format: float
          nullable: true
          description: Porcentaje (0-1) de ocupación respecto de la capacidad.
    AdminAnalyticsAttendancePoint:
      type: object
      required: [hour, valid, duplicate, unique]
      properties:
        hour:
          type: string
          format: date-time
          nullable: true
        valid:
          type: integer
          minimum: 0
        duplicate:
          type: integer
          minimum: 0
        unique:
          type: integer
          minimum: 0
    AdminAnalyticsTenant:
      type: object
      required: [id, name, slug]
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
    EventAnalyticsResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [hourly, checkpoints, duplicates, errors]
          properties:
            hourly:
              $ref: '#/components/schemas/EventAnalyticsHourlyDataset'
            checkpoints:
              $ref: '#/components/schemas/EventAnalyticsCheckpointDataset'
            duplicates:
              $ref: '#/components/schemas/EventAnalyticsDuplicatesDataset'
            errors:
              $ref: '#/components/schemas/EventAnalyticsErrorsDataset'
    EventAnalyticsHourlyDataset:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventAnalyticsHourlyPoint'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    EventAnalyticsHourlyPoint:
      type: object
      required: [hour, valid, duplicate, unique]
      properties:
        hour:
          type: string
          format: date-time
          nullable: true
        valid:
          type: integer
          minimum: 0
        duplicate:
          type: integer
          minimum: 0
        unique:
          type: integer
          minimum: 0
    EventAnalyticsCheckpointDataset:
      type: object
      required: [data, meta, totals]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventAnalyticsCheckpointRow'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        totals:
          type: object
          required: [valid, duplicate, invalid]
          properties:
            valid:
              type: integer
              minimum: 0
            duplicate:
              type: integer
              minimum: 0
            invalid:
              type: integer
              minimum: 0
    EventAnalyticsCheckpointRow:
      type: object
      required: [checkpoint_id, name, valid, duplicate, invalid]
      properties:
        checkpoint_id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        valid:
          type: integer
          minimum: 0
        duplicate:
          type: integer
          minimum: 0
        invalid:
          type: integer
          minimum: 0
    EventAnalyticsDuplicatesDataset:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventAnalyticsDuplicateRow'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    EventAnalyticsDuplicateRow:
      type: object
      required: [ticket_id, qr_code, guest_name, occurrences, last_scanned_at]
      properties:
        ticket_id:
          type: string
          nullable: true
        qr_code:
          type: string
          nullable: true
        guest_name:
          type: string
          nullable: true
        occurrences:
          type: integer
          minimum: 1
        last_scanned_at:
          type: string
          format: date-time
          nullable: true
    EventAnalyticsErrorsDataset:
      type: object
      required: [data, meta]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventAnalyticsErrorRow'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    EventAnalyticsErrorRow:
      type: object
      required: [ticket_id, result, qr_code, guest_name, occurrences, last_scanned_at]
      properties:
        ticket_id:
          type: string
          nullable: true
        result:
          type: string
          enum: [invalid, revoked, expired]
        qr_code:
          type: string
          nullable: true
        guest_name:
          type: string
          nullable: true
        occurrences:
          type: integer
          minimum: 1
        last_scanned_at:
          type: string
          format: date-time
          nullable: true
    BillingInvoiceResponse:
      type: object
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/BillingInvoiceResource'
    BillingInvoiceResource:
      type: object
      required:
        - id
        - tenant_id
        - status
        - subtotal_cents
        - tax_cents
        - total_cents
        - line_items
        - payments
      properties:
        id:
          type: string
          description: Identificador de la factura.
        tenant_id:
          type: string
          description: Identificador del tenant asociado.
        status:
          type: string
          description: Estado actual de la factura.
          enum: [pending, paid, void]
        period_start:
          type: string
          format: date-time
          nullable: true
        period_end:
          type: string
          format: date-time
          nullable: true
        issued_at:
          type: string
          format: date-time
          nullable: true
        paid_at:
          type: string
          format: date-time
          nullable: true
        due_at:
          type: string
          format: date-time
          nullable: true
        subtotal_cents:
          type: integer
        tax_cents:
          type: integer
        total_cents:
          type: integer
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoiceLineItem'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/BillingInvoicePayment'
    BillingInvoiceLineItem:
      type: object
      required: [type, description, quantity, unit_price_cents, amount_cents]
      properties:
        type:
          type: string
        description:
          type: string
        quantity:
          type: integer
        unit_price_cents:
          type: integer
        amount_cents:
          type: integer
    BillingInvoicePayment:
      type: object
      required: [id, provider, provider_charge_id, amount_cents, currency, status]
      properties:
        id:
          type: string
        provider:
          type: string
        provider_charge_id:
          type: string
        amount_cents:
          type: integer
        currency:
          type: string
        status:
          type: string
        processed_at:
          type: string
          format: date-time
          nullable: true
  responses:
    UnauthorizedError:
      description: Autenticación requerida o token inválido.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            token-invalido:
              summary: Token inválido
              value:
                error:
                  code: UNAUTHORIZED
                  message: Invalid token provided.
    ForbiddenError:
      description: El usuario autenticado no tiene permisos suficientes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            sin-permisos:
              summary: Acceso denegado
              value:
                error:
                  code: FORBIDDEN
                  message: This action is unauthorised.
    NotFoundError:
      description: Recurso no encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            no-encontrado:
              summary: Usuario inexistente
              value:
                error:
                  code: NOT_FOUND
                  message: The requested resource was not found.
    ConflictError:
      description: Conflicto de datos (por ejemplo, email duplicado).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            email-duplicado:
              summary: Email duplicado
              value:
                error:
                  code: VALIDATION_ERROR
                  message: The given data was invalid.
                  details:
                    email:
                      - The email has already been taken.
    ValidationError:
      description: Datos inválidos en la solicitud.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            campos-invalidos:
              summary: Campos inválidos
              value:
                error:
                  code: VALIDATION_ERROR
                  message: The given data was invalid.
                  details:
                    email:
                      - The email field must be a valid email address.
                    password:
                      - The password field must be at least 12 characters.
